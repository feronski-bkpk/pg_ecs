searchState.loadedDescShard("legion", 0, "Legion aims to be a feature rich high performance ECS …\nQueries provide efficient iteration and filtering of …\nSerde (de)serialization of worlds.\nA “packed archetype” storage model.\nWraps a function in a system, and generates a new function …\nAutomatic query scheduling and parallel execution.\nWorlds store collections of entities. An entity is a …\nA filter which requires all filters within <code>T</code> match.\nA filter which always matches <code>true</code>.\nAn iterator which yields entity chunks from a query.\nProvides access to slices of components for entities which …\nA filter which performs course-grained change detection.\nA filter which matches <code>true</code> when the given component …\nThe inner data representation fetched from the archetype. …\nDeclares the default filter type used by a view when it is …\nThe filter has not made a decision, defer to other filters.\nThe dynamic filter type.\nA filter which selects based upon the data available in …\nThe type of component references returned.\nA combination of a LayoutFilter and a DynamicFilter.\nA type which holds onto a slice of entitiy data retrieved …\nThe fetch type yielded for each archetype.\nThe filter constructed.\nIndicates if an an archetype should be accepted or …\nAllows a filter to determine if component optimization …\nA type (typically a view) which can construct a query.\nAn entity chunk iterator which internally locks its filter …\nThe iterator type which pulls entity data out of a world.\nThe layout filter type.\nA filter which selects based upon which component types …\nThe filter has made a decision, <code>true</code> for accept, <code>false</code> for …\nA filter which negates <code>F</code>.\nA filter which requires any filter within <code>T</code> match.\nA parallel entity chunk iterator.\nA filter which always defers.\nProvides efficient means to iterate and filter entities in …\nReads a single entity data component type from a chunk.\nContains the type IDs read by the view.\nA filter which matches <code>true</code> if the entity has the given …\nReads a single entity data component type from a chunk.\nWrites a single entity data component type from a chunk.\nA type which can pull entitiy data out of a world.\nWrites a single mutable entity data component type from a …\nContains the type IDs written by the view.\nIndicates that the archetype is going to be provided to …\nConstructs a filter which passes all entities.\nReturns the archetype that all entities in the chunk …\nReturns <code>true</code> if the filter may potentially match a group.\nCombines the result with a logical and operator.\nCombines the result with a logical or operator.\nConstructs a filter which requires that the entities have …\nReturns a slice of components.\nReturns a mutable slice of components.\nCreates an iterator which will yield slices of entity data …\nAdds an additional filter to the query.\nReturns a tuple of the layout and dynamic filters.\nTries to find a slice of components, if this fetch …\nTries to find a mutable slice of components, if this fetch …\nIterates through all components which match the query.\nIterates through all entity chunks which match the query.\nIterates through all entity chunks which match the query.\nIterates through all entity chunks which match the query.\nIterates through all components which match the query.\nIterates through all components which match the query.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the components for a single entity.\nConverts the chunk into a tuple of it’s inner slices.\nReturns the components for a single entity.\nReturns the components for a single entity.\nReturns the components that are requried to be present in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the fetch into the retrieved component slices\nConverts the chunk into a tuple of it’s inner slices.\nConverts the chunk into an iterator which yields tuples of …\nReturns <code>true</code> if the archetype should be accepted.\nReturns an iterator which will yield all components which …\nReturns an iterator which will yield all entity chunks …\nReturns an iterator which will yield all entity chunks …\nReturns an iterator which will yield all entity chunks …\nReturns an iterator which will yield all components which …\nReturns an iterator which will yield all components which …\nReturns a reference to the layout filter.\nCalculates the filter’s result for the given archetype …\nCalculates the filter’s result for the given entity …\nConstructs a filter which requires that the component …\nConsructs a new Query\nIterates in parallel through all components which match …\nIterates in parallel through all entity chunks which match …\nIterates in parallel through all entity chunks which match …\nIterates in parallel through all entity chunks which match …\nIterates in parallel through all components which match …\nIterates in parallel through all components which match …\nReturns a parallel iterator which will yield all …\nReturns a parallel iterator which will yield all entity …\nReturns a parallel iterator which will yield all entity …\nReturns a parallel iterator which will yield all entity …\nReturns a parallel iterator which will yield all …\nReturns a parallel iterator which will yield all …\nConstructs a filter which performs a no-op and defers to …\nPrepares the filter to run.\nConstructs a query.\nReturns <code>true</code> if the view reads the specified data type.\nReturns the component types read by the view.\nReturns a permissions struct declaring the component …\nDetermines if this view type is valid. Panics if checks …\nReturns <code>true</code> if the given component access includes all …\nTries to find the component slice version of a component, …\nReturns <code>true</code> if the view writes to the specified data type.\nReturns the component types written to by the view.\nA TypeKey which can construct itself for a given type T.\nContains the canon names of entities.\nWraps a WorldDeserializer and a world and implements …\nWraps a WorldDeserializer and a universe and implements …\nA 16 byte UUID which uniquely identifies an entity.\nDescribes how to serialize and deserialize a runtime <code>Entity</code>…\nAbort (de)serialization wwith an error.\nIgnore the component.\nA world (de)serializer which describes how to …\nA serializable representation of a world.\nThe stable type ID used to identify each component type in …\nThe stable type ID used to identify each component type in …\nA (de)serializable type which can represent a component …\nAn error type describing what to do when a component type …\nDescribes a type which knows how to deserialize the …\nDescribes a type which knows how to deserialize the …\nConstructs a serde::DeserializeSeed which will deserialize …\nConstructs a serde::DeserializeSeed which will deserialize …\nCanonizes the given entity and name pair.\nCanonizes a given Entity ID and returns the associated …\nCanonizes a given EntityName and returns the associated …\nDeserializes an <code>Entity</code>.\nDeserializes a single component and returns it as a boxed …\nDeserializes a slice of components and inserts them into …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the Entity ID associated with the given EntityName.\nReturns the EntityName associated with the given Entity ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a runtime component type ID into the serialized …\nConstructs the type key for component type <code>T</code>.\nConstructs a new registry.\nSets the behavior to use when a component type is unknown.\nRegisters a component type and its key with the registry.\nRegisters a component type and its key with the registry.\nAdds the specified component to the given entity layout.\nSerializes an <code>Entity</code> by constructing the serializable …\nSerializes a single component.\nSerializes a slice of components.\nConverts the serialized type ID into a runtime component …\nCalls <code>callback</code> with the Entity ID serializer\nCalls <code>callback</code> with the Entity ID serializer\nAn archetype is a collection of entities which all have …\nThe index of an archetype in a world.\nDefines a type which can describe the layout of an …\nProvides access to writers for writing new entities into …\nA marker trait for all types which can be attached to an …\nThe index of a component within an archetype.\nContains information about the type of a component.\nAn accessor for a shared slice reference of components for …\nAn accessor for a mutable slice reference of components …\nDescribes a type which can write entity components into a …\nA storage location for component data slices. Each …\nA unique ID for a component type.\nA hasher optimized for hashing component type IDs.\nProvides the ability to append new components to the …\nContains the storages for all component types in a world.\nPrepend a new type into a cons list\ntransform cons list into a flat tuple\nDescribes the component types which are attached to an …\nA world epoch. Epochs are incremented each time a world is …\nA filter which finds existing archetypes which match the …\nDescribes the components in a component group.\nA type which defines a component group.\nConverts a type into a ComponentSource.\nDesribes a type which can convert itself into an SoA …\nAn iterator of shared archetype slice references.\nAn iterator of mutable archetype slice references.\nProvides mutable access to multiple different component …\nResult of append\nFlattened tuple\nDescribes how to perform a component pack operation.\nStores a slice of components of type <code>T</code> for each archetype. …\nAn index of archetype layouts used to accelerate query …\nThe output component source.\nThe output entity source.\nThe storage type required to hold all instances of this …\nA hasher optimized for hashing types that are represented …\nA storage location for component data slices. Each …\nProvides the ability to append new components to the …\nThe version of a component slice. Versions are incremented …\nAdds a new component to the end of the group.\nReturns the alignment of the component.\nPrepend to runtime cons value\nReturns the archetype being written to.\nClaims exclusive access to a component storage.\nClaims a component storage for a given component.\nClaims a component storage for a given component.\nClaims exclusive access to a component storage.\nReturns a slice of component type IDs for the components …\nReturns a boxed object from a boxed trait object if the …\nReturns a mutable reference to the object within the trait …\nReturns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …\nReturns a reference to the object within the trait object …\nDrops the component.\nReturns the component metadata.\nEnsures that the given spare capacity is available for …\nEnsures that the given spare capacity is available in the …\nEnsures that the given spare capacity is available in the …\nReturns a slice of entity IDs for all entities which …\nCopies new components into the specified archetype slice.\nWrites the given components into the component storage.\nWrites new components into the given archetype’s …\nWrites the given components into the component storage.\nReturns the archetype source’s filter.\nFlatten runtime cons value\nForce a repack.\nA heuristic estimating cache misses for an iteration …\nThe estimated number of cache misses due to fragmentation …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new component group from a vector of …\nGets the component slice for the specified archetype.\nReturns the storage for the given component type.\nReturns the storage for the given component type.\nReturns the storage for the given component type.\nReturns a writer for writing to multiple component …\nGets a mutable component slice for the specified archetype.\nReturns the storage for the given component type.\nReturns a pointer to the given archetype’s component …\nGets or inserts the storage for the given component type.\nReturns a pointer to the given archetype’s component …\nReturns <code>true</code> if the layout contains the given component …\nReturns <code>true</code> if the layout contains the given component …\nNotifies the storage of the start of a new epoch.\nReturns the index of the archetype.\nInserts a new empty component slice for an archetype into …\nReturns a slice of entities inserted by this writer, and …\nConverts this structure into a component source.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this slice into its inner value.\nConverts this slice into its inner value. This increments …\nConverts this into an SoA component source.\nReturns true if the trait object wraps an object of type …\nReturns <code>true</code> if the storage contains no archetypes.\nReturns <code>true</code> if the storage contains no archetypes.\nIterates through all archetype component slices.\nIterates through all mutable archetype component slices.\nConstructs a new entity layout.\nReturns the layout of the archetype, describing which …\nReturns the number of archetype slices stored.\nThe target maximum number of entities to move during a …\nMoves all of the components from the given storage …\nMoves a component from one archetype to another.\nMoves a single component from the given storage location …\nConstructs a new archetype writer.\nConstructs a new entity layout.\nConstructs a new component group.\nConstructs the component type ID for the given component …\nReturns the component meta of component type <code>T</code>.\nPacks archetype slices.\nRepacks all component storages.\nPushes an entity ID into the archetype.\nWrites components for new entities into an archetype.\nAdds a new component to the layout.\nAdds a new component to the layout.\nReserves capacity for at least <code>additional</code> extra entity IDs …\nReturns an iterator over archetype indexes for archetypes …\nReturns an iterator over archetype indexes for archetypes …\nReturns the size of the component.\nThe number of frames that an archetype has to remain …\nRemoves a component from an archetype slice, swapping it …\nCreates a group definition.\nMoves an archetype’s component slice to a new storage.\nMoves a component to a new storage.\nMoves a component to a new storage.\nReturns the internal TypeID of the component.\nA factory for <code>Schedule</code>.\nA command buffer used to queue mutable changes to the …\nExecutes a sequence of systems, potentially in parallel, …\nErgonomic wrapper type which contains a <code>Ref</code> type.\nFlush system command buffers.\nA <code>Runnable</code> which is also <code>Send</code> and <code>Sync</code>.\nProvides an abstraction across tuples of queries for …\nBlanket trait for resource types.\nTrait which is implemented for tuples of resources and …\nUnique ID for a resource.\nResources container. Shared resources stored here can be …\nThe resource reference returned during a fetch.\nTrait describing a schedulable type. This is implemented …\nA schedule of systems for execution.\nA step in a schedule.\nA resource collection which is <code>Send</code> and <code>Sync</code>, but which …\nThe concrete type which contains the system closure …\nStructure describing the resource and component access …\nA low level builder for constructing systems.\nA function which can provide the body of a system.\nA diagnostic identifier for a system.\nA batch of systems.\nA thread local function.\nA thread local system\nA container for resources which performs runtime borrow …\nThis trait can be used to implement custom world writer …\nGets the set of archetypes the system will access when run,\nQueues the addition of a component from an entity in the …\nAdds a system to the schedule.\nAdds a thread local system to the schedule. This system …\nAdds a thread local function to the schedule. This …\nFinalizes the builder into a <code>Schedule</code>.\nBuilds a system which is not <code>Schedulable</code>, as it is not …\nCreates a new schedule builder.\nGets the system’s command buffer.\nReturns <code>true</code> if type <code>T</code> exists in the store. Otherwise, …\nReturns a boxed object from a boxed trait object if the …\nReturns a mutable reference to the object within the trait …\nReturns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …\nReturns a reference to the object within the trait object …\nExecutes an arbitrary closure against the mutable world, …\nExecutes all systems and then flushes their command …\nExecutes all of the steps in the schedule.\nExecutes all of the steps in the schedule, with …\nQueues the insertion of new entities into the world.\nFetches all defined resources.\nFetches all defined resources.\nFetches all defined resources.\nFetches all defined resources.\nFetches all defined resources, without checking mutability.\nEvaluates the queries and records which archetypes they …\nFlushes this command buffer, draining all stored commands …\nWaits for executing systems to complete, and the flushes …\nFlushes the recorded command buffers for all systems.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieve an immutable reference to  <code>T</code> from the store if it …\nRetrieve an immutable reference to  <code>T</code> from the store if it …\nRetrieve a mutable reference to  <code>T</code> from the store if it …\nRetrieve a mutable reference to  <code>T</code> from the store if it …\nAttempts to retrieve a mutable reference to <code>T</code> from the …\nAttempts to retrieve a mutable reference to <code>T</code> from the …\nAttempts to retrieve a mutable reference to <code>T</code> from the …\nAttempts to retrieve an immutable reference to <code>T</code> from the …\nAttempts to retrieve an immutable reference to <code>T</code> from the …\nAttempts to retrieve an immutable reference to <code>T</code> from the …\nInserts the instance of <code>T</code> into the store. If the type …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this executor into a vector of its component …\nConverts the schedule into a vector of steps.\nReturns true if the trait object wraps an object of type …\nReturns true if this <code>CommandBuffer</code> is currently empty and …\nReturns the current number of commands already queued in …\nPerforms merging of two resource storages, which occurs …\nGets the name of the system.\nConstructs an empty command buffer.\nConstructs a new executor for all systems to be run in a …\nCreate a new system builder to construct a new system.\nReturns the resource type ID of the given resource type.\nPrepares the system for execution against a world.\nQueues the insertion of a single entity into the world.\nThis performs a soft resource block on the component for …\nFlag this resource type as being read by this system.\nGets the resources and component types read by the system.\nQueues the deletion of an entity in the command buffer.\nRemoves the type <code>T</code> from this store if it exists.\nQueues the removal of a component from an entity in the …\nRuns the system body.\nRuns the system.\nRuns the system.\nExecutes all systems, potentially in parallel.\nRuns the system.\nCreates an accessor to resources which are Send and Sync, …\nProvides a name to the system being built.\nDefines a query to provide this system for its execution. …\nGets the ID of the world this command buffer belongs to.\nDestructs the writer and performs the write operations on …\nThis performs a exclusive resource block on the component …\nFlag this resource type as being written by this system.\nGets the resources and component types written by the …\nAttempted to access an entity which lies outside of the …\nAll archetypes.\nAll component types are allowed.\nAn iterator which yields new entity IDs.\nSome component types are allowed.\nDescribes which archetypes are available for access.\nA new archetype has been created.\nReplace references to entities which have been cloned with …\nDescribes which components are available for access.\nAn error type which describes why an attempt to retrieve a …\nThe world does not allow access to the component.\nSome component types are disallowed.\nA merger which clones entities from the source world into …\nAn opaque identifier for an entity.\nError type representing a failure to access entity data.\nA hasher optimized for entity IDs.\nAn entity has been inserted into an archetype.\nThe storage location of an entity’s data.\nAttempted to access an entity which does not exist.\nAn entity has been removed from an archetype.\nDescribes how a merger wishes <code>Entity</code> references inside …\nThe <code>EntityStore</code> trait abstracts access to entity data as …\nProvides safe read and write access to an entity’s …\nProvides safe read and write access to an entity’s …\nProvides safe read-only access to an entity’s components.\nEvents emitted by a world to subscribers. See …\nDescribes a type which can send entity events.\nReplace IDs according to the given map.\nA map of entity IDs to their storage locations.\nDescribes how to merge two worlds.\nThe component was not found on the entity.\nDescribes read and write access to resources.\nSome archetypes.\nProvides access to the archetypes and entity components …\nProvides access to a subset of the entities of a <code>World</code>.\nA container of entities.\nUnique identifier for a world.\nDescribes configuration options for the creation of a new …\nAdds all of the permissions contained in the given set to …\nAdds a new component to the entity. If the component …\nReturns <code>truw</code> if the given component is accessible for …\nReturns <code>truw</code> if the given component is accessible for …\nReturns the entity’s archetype.\nReturns the entity’s archetype.\nReturns the entity’s archetype.\nReturns the entity’s archetype index.\nReturns the archetypes.\nCreates a serde serializable representation of the world.\nReturns the ID to use in the destination world when …\nReturns the ID to use in the destination world when …\nReturns a bitset of allowed archetype indexes if this …\nReturns <code>true</code> if the given archetype is accessable from …\nRemoves all entities from the world.\nClones the entities from a world into this world.\nClones a single entity from the source world into the …\nReturns the entity’s component index within its …\nReturns the raw component storage.\nReturns the component storage.\nReturns <code>true</code> if the location map contains the given entity.\nReturns <code>true</code> if the world contains an entity with the …\nCalculates the destination entity layout for the given …\nCalculates the destination entity layout for the given …\nIndicates how the merger wishes entity IDs to be adjusted …\nIndicates how the merger wishes entity IDs to be adjusted …\nGets an entry for an entity, allowing manipulation of the …\nReturns a mutable entity entry which can be used to access …\nReturns an entity entry which can be used to access entity …\nAppends a collection of entities to the world. Returns the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the location of an entity.\nReturns a reference to one of the entity’s components.\nReturns a reference to one of the entity’s components.\nReturns a reference to one of the entity’s components.\nReturns a mutable reference to one of the entity’s …\nReturns a mutable reference to one of the entity’s …\nReturns a component storage accessor for component types …\nReturns a mutable reference to one of the entity’s …\nReturns a mutable reference to one of the entity’s …\nReturns a mutable reference to one of the entity’s …\nReturns the group the given component belongs to.\nReturns group definitions.\nA vector of component groups to provide layout hints for …\nReturns the world’s unique ID.\nReturns the world’s unique ID.\nReturns the world ID.\nInserts an collection of adjacent entities into the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a reference to one of the entity’s components.\nReturns a reference to one of the entity’s components.\nReturns a reference to one of the entity’s components.\nReturns a mutable reference to one of the entity’s …\nReturns a mutable reference to one of the entity’s …\nReturns a mutable reference to one of the entity’s …\nReturns a mutable reference to one of the entity’s …\nReturns a mutable reference to one of the entity’s …\nDetermines if the given archetypes are disjoint from those …\nReturns <code>true</code> if none of the permissions in the given set …\nReturns <code>true</code> if the location map is empty.\nReturns <code>true</code> if the world contains no entities.\nReturns <code>true</code> if all of the permissions in the given set …\nReturns the archetype layout index.\nReturns the number of entities in the map.\nReturns the number of entities in the world.\nReturns the entity’s location.\nReturns the entity’s location.\nReturns the entity’s location.\nMerges an archetype from the source world into the …\nMerges the given world into this world by moving all …\nConstructs a new enity ID allocator iterator.\nConstructs a new entity location.\nConstructs a new empty permissions set.\nCreates a new world with the given options,\nCreates a new duplicate merger.\nConstructs a new SubWorld.\nPacks the world’s internal component storage to optimise …\nIndicates if the merger prefers to merge into a new empty …\nIndicates if the merger prefers to merge into a new empty …\nAdds a resource to the permissions set as both readable …\nAppends a new entity to the world. Returns the ID of the …\nAdds a resource to the permissions set as readable.\nAppends a named entity to the word, replacing any existing …\nAdds a resource to the permissions set as writable.\nGets a slice of resources which are afforded read access.\nGets a slice of resources which are afforded read access …\nGets a slice of resources which are afforded both read and …\nAllows the merger to clone the given component into the …\nAllows the merger to clone the given component into the …\nAllows the merger to clone the given component into the …\nAllows the merger to copy the given component into the …\nRemoves an entity from the location map.\nRemoves a resource from the permissions set.\nRemoves the specified entity from the world. Returns <code>true</code> …\nRemoves a component from the entity. Does nothing if the …\nRemoves read access to a resource from the permissions set.\nRemoves write access to a resource from the permissions …\nSends the given event to all listeners. Returns <code>true</code> if …\nInserts or updates the location of an entity.\nSplits the world into two. The left world allows access …\nSplits the world into two. The left world allows access …\nSplits the world into two. The left world allows access …\nSplits the world into two. The left world allows access …\nSubscribes to entity events.\nSubtracts all of the permissions contained in the given …\nGets a slice of resources which are afforded write access.\nGets a slice of resources which are afforded write access …\nThe type name of the component.\nThe type name of the component.\nThe type ID of the component.\nThe type ID of the component.")