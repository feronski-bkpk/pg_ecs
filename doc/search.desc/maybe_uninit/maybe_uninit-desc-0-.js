searchState.loadedDescShard("maybe_uninit", 0, "A wrapper type to construct uninitialized instances of <code>T</code>.\nExtracts the values from an array of <code>MaybeUninit</code> …\nReturns the contents of this <code>MaybeUninit</code> as a slice of …\nReturns the contents of this <code>MaybeUninit</code> as a mutable …\nGets a mutable pointer to the contained value. Reading …\nGets a pointer to the contained value. Reading from this …\nExtracts the value from the <code>MaybeUninit&lt;T&gt;</code> container. This …\nDrops the contained value in place.\nGets a mutable (unique) reference to the contained value.\nReads the value from the <code>MaybeUninit&lt;T&gt;</code> container. The …\nGets a shared reference to the contained value.\nClones the elements from <code>src</code> to <code>this</code>, returning a mutable …\nCopies the elements from <code>src</code> to <code>this</code>, returning a mutable …\nFills <code>this</code> with elements by cloning <code>value</code>, returning a …\nFills <code>this</code> with elements yielded by an iterator until …\nFills <code>this</code> with elements returned by calling a closure …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MaybeUninit&lt;T&gt;</code> initialized with the given …\nReturns the contents of this slice of <code>MaybeUninit</code> as a …\nReturns the contents of this mutable slice of <code>MaybeUninit</code> …\nGets a mutable pointer to the first element of the array.\nGets a pointer to the first element of the array.\nAssuming all the elements are initialized, get a mutable …\nAssuming all the elements are initialized, get a slice to …\nTransposes a <code>MaybeUninit&lt;[T; N]&gt;</code> into a <code>[MaybeUninit&lt;T&gt;; N]</code>…\nCreates a new <code>MaybeUninit&lt;T&gt;</code> in an uninitialized state.\nCreate a new array of <code>MaybeUninit&lt;T&gt;</code> items, in an …\nSets the value of the <code>MaybeUninit&lt;T&gt;</code>.\nCreates a new <code>MaybeUninit&lt;T&gt;</code> in an uninitialized state, …")