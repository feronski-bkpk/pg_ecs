searchState.loadedDescShard("bracket_algorithm_traits", 0, "This crate is part of the <code>bracket-lib</code> family.\nExported traits\n<code>Algorithm2D</code> support Implement these for handling …\n<code>Algorithm3D</code> support Implement these for handling …\n<code>BaseMap</code> support Implement this trait to support …\nSince we use <code>SmallVec</code>, it’s only polite to export it so …\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nReturns a raw mutable pointer to the vector’s buffer.\nExtracts a mutable slice of the entire vector.\nReturns a raw pointer to the vector’s buffer.\nExtracts a slice containing the entire vector.\nThe number of items the vector can hold without …\nRemove all elements from the vector.\nRemoves consecutive duplicate elements.\nRemoves consecutive duplicate elements using the given …\nRemoves consecutive elements that map to the same key.\nRetrieve the map’s dimensions. Made optional to reduce …\nRetrieve the map’s dimensions. Made optional to reduce …\nDimensions\nDimensions\nCreates a draining iterator that removes the specified …\nCopy elements from a slice and append them to the vector.\nReturns the argument unchanged.\nConstructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …\nConstructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …\nConstructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …\nCreates a <code>SmallVec</code> with <code>n</code> copies of <code>elem</code>.\nCreates a <code>SmallVec</code> directly from the raw components of …\nCopy the elements from a slice into a new <code>SmallVec</code>.\nConstruct a new <code>SmallVec</code> from a <code>Vec&lt;A::Item&gt;</code>.\nReturn a vector of tile indices to which one can path from …\nReturn a vector of tile indices to which one can path from …\nReturn the distance you would like to use for …\nReturn the distance you would like to use for …\nRe-allocate to set the capacity to …\nConvert an array index to a point. Defaults to an index …\nConvert an array index to a point. Defaults to an index …\nConvert an array index to a point.\nConvert an array index to a point.\nThe maximum number of elements this vector can hold inline\nInsert an element at position <code>index</code>, shifting all elements …\nCopy elements from a slice into the vector at position …\nInsert multiple elements at position <code>index</code>, shifting all …\nCalls <code>U::from(self)</code>.\nConverts a <code>SmallVec</code> into a <code>Box&lt;[T]&gt;</code> without reallocating …\nConvert the <code>SmallVec</code> into an <code>A</code> if possible. Otherwise …\nConvert a <code>SmallVec</code> to a <code>Vec</code>, without reallocating if the …\nReturns <code>true</code> if the vector is empty\nTrue is you cannot see through the tile, false otherwise. …\nTrue is you cannot see through the tile, false otherwise. …\nThe number of elements stored in the vector\nConstruct an empty vector\nConvert a Point (x/y) to an array index. Defaults to an …\nConvert a Point (x/y) to an array index. Defaults to an …\nConvert a Point (x/y) to an array index. Defaults to a Z, …\nConvert a Point (x/y) to an array index. Defaults to a Z, …\nRemove an item from the end of the vector and return it, …\nAppend an item to the vector.\nRemove and return the element at position <code>index</code>, shifting …\nReserve capacity for <code>additional</code> more elements to be …\nReserve the minimum capacity for <code>additional</code> more elements …\nResizes the vector so that its length is equal to <code>len</code>.\nResizes the <code>SmallVec</code> in-place so that <code>len</code> is equal to …\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nSets the length of a vector.\nShrink the capacity of the vector as much as possible.\nSince we use <code>SmallVec</code>, it’s only polite to export it so …\nReturns <code>true</code> if the data has spilled into a separate …\nRemove the element at position <code>index</code>, replacing it with …\nShorten the vector, keeping the first <code>len</code> elements and …\nRe-allocate to set the capacity to …\nReserve capacity for <code>additional</code> more elements to be …\nReserve the minimum capacity for <code>additional</code> more elements …\nConstruct an empty vector with enough capacity …")