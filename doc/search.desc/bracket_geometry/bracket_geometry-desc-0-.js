searchState.loadedDescShard("bracket_geometry", 0, "This crate is part of the <code>bracket-lib</code> family.\nExport the library into a prelude for convenience. See the …\nLine-drawing iterator\nUse Bresenham’s rasterization algorithm for line …\nAn implementation of [Bresenham’s circle algorithm]. […\nA version of the Bresenham circle that does not make …\nNew type over <code>Bresenham</code> which include the <code>end</code> points when …\nUse Chebyshev distance (like Manhattan, but adds one to …\nConvenience type: you can define an angle in Degrees and …\nUse a diagonal distance, the max of the x and y distances\nEnumeration of available 2D Distance algorithms\nEnumeration of available 2D Distance algorithms\nUse Manhattan distance (distance up plus distance along)\nHelper struct defining a 2D point in space.\nHelper struct defining a 2D point in space.\nA 2D floating-point position.\nUse the Pythagoras algorithm for determining distance - …\nUs the Pythagoras algorithm for distance, but omitting the …\nConvenience type: you can define an angle in Radians and …\nDefines a two-dimensional rectangle.\nDefines a rectangle with floating-point coordinates.\nUse a vector approach to line solving.\nDefine a line using a fast 2D vector. It may not be as …\nReturn the next point without checking if we are past <code>end</code>.\nReturn the next point without checking if we are past <code>end</code>.\nReturns the center of the rectangle\nReturns the center of the rectangle\nCreate a new point from i32, this can be constant\nProvides a 2D distance between points, using the specified …\nProvides a 3D distance between points, using the specified …\nCalls a function for each x/y point in the rectangle\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a point from a tuple of two i32s\nCreate a point from an x/y/z tuple\nCreates a point from an <code>UltraViolet</code> vec2\nReturns the rectangle’s height\nReturns the rectangle’s height\nReturns true if this overlaps with other\nReturns true if this overlaps with other\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPlots a line between two 2D points and returns a vector of …\nUses a Bresenham’s algorithm to plot a line between two …\nUses a 2D vector algorithm to plot a line between two …\nCreates a new circle, using the Bresenham Circle algorithm.\nCreates a Bresenham Circle without allowing diagonal gaps.\nCreates a new iterator.Yields intermediate points between …\nCreates a new iterator. Yields points <code>start..=end</code>.\nDefine a vector line between two points.\nCreates a new angle in degrees.\nCreates a new angle in radians.\nCreate a new point from an x/y coordinate.\nCreate a new point from an x/y/z coordinate.\nReturns true if a point is inside the rectangle\nReturns true if a point is inside the rectangle\nGets a set of all tiles in the rectangle\nFrom a given start point, project forward radius units at …\nHelper for map index conversion\nConverts the point to an i32 tuple\nConverts the point to a usize tuple\nConverts the point to an UltraViolet vec2\nConverts into an UltraViolet Vec3\nReturns the rectangle’s width\nReturns the rectangle’s width\nCreate a new rectangle, specifying exact dimensions\nCreate a new rectangle, specifying exact dimensions\nCreate a new rectangle, specifying X/Y Width/Height\nCreate a new rectangle, specifying X/Y Width/Height\nThe point’s X location\nThe 3D point’s X location\nThe X position of the first point (typically the left)\nThe X position of the first point (typically the left)\nThe X position of the second point (typically the right)\nThe X position of the second point (typically the right)\nThe point’s Y location\nThe 3D point’s Y location\nThe Y position of the first point (typically the top)\nThe Y position of the first point (typically the top)\nThe Y position of the second point (typically the bottom)\nThe Y position of the second point (typically the bottom)\nThe 3D point’s Z location\nCreate a zero point\nCreates a zero rectangle\nCreates a zero rectangle")