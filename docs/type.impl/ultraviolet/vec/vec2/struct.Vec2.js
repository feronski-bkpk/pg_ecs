(function() {var type_impls = {
"pg_ecs":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add-for-Vec2\" class=\"impl\"><a href=\"#impl-Add-for-Vec2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a> for Vec2</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = Vec2</h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: Vec2) -&gt; Vec2</h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add","pg_ecs::prelude::PointF"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign-for-Vec2\" class=\"impl\"><a href=\"#impl-AddAssign-for-Vec2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.AddAssign.html\" title=\"trait core::ops::arith::AddAssign\">AddAssign</a> for Vec2</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a href=\"#method.add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, rhs: Vec2)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","pg_ecs::prelude::PointF"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Vec2\" class=\"impl\"><a href=\"#impl-Clone-for-Vec2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for Vec2</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Vec2</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.81.0/src/core/clone.rs.html#172\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","pg_ecs::prelude::PointF"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Vec2\" class=\"impl\"><a href=\"#impl-Debug-for-Vec2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for Vec2</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","pg_ecs::prelude::PointF"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Vec2\" class=\"impl\"><a href=\"#impl-Default-for-Vec2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for Vec2</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Vec2</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.81.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","pg_ecs::prelude::PointF"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3Cf32%3E-for-Vec2\" class=\"impl\"><a href=\"#impl-Div%3Cf32%3E-for-Vec2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>&gt; for Vec2</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = Vec2</h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>) -&gt; Vec2</h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<f32>","pg_ecs::prelude::PointF"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div-for-Vec2\" class=\"impl\"><a href=\"#impl-Div-for-Vec2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a> for Vec2</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = Vec2</h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: Vec2) -&gt; Vec2</h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div","pg_ecs::prelude::PointF"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3Cf32%3E-for-Vec2\" class=\"impl\"><a href=\"#impl-DivAssign%3Cf32%3E-for-Vec2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.DivAssign.html\" title=\"trait core::ops::arith::DivAssign\">DivAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>&gt; for Vec2</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign\" class=\"method trait-impl\"><a href=\"#method.div_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign<f32>","pg_ecs::prelude::PointF"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign-for-Vec2\" class=\"impl\"><a href=\"#impl-DivAssign-for-Vec2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.DivAssign.html\" title=\"trait core::ops::arith::DivAssign\">DivAssign</a> for Vec2</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign\" class=\"method trait-impl\"><a href=\"#method.div_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, rhs: Vec2)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","pg_ecs::prelude::PointF"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26%5Bf32;+2%5D%3E-for-Vec2\" class=\"impl\"><a href=\"#impl-From%3C%26%5Bf32;+2%5D%3E-for-Vec2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.array.html\">2</a>]&gt; for Vec2</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(comps: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.array.html\">2</a>]) -&gt; Vec2</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&[f32; 2]>","pg_ecs::prelude::PointF"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26(f32,+f32)%3E-for-Vec2\" class=\"impl\"><a href=\"#impl-From%3C%26(f32,+f32)%3E-for-Vec2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>)&gt; for Vec2</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(comps: &amp;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>)) -&gt; Vec2</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&(f32, f32)>","pg_ecs::prelude::PointF"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26mut+%5Bf32;+2%5D%3E-for-Vec2\" class=\"impl\"><a href=\"#impl-From%3C%26mut+%5Bf32;+2%5D%3E-for-Vec2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.array.html\">2</a>]&gt; for Vec2</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(comps: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.array.html\">2</a>]) -&gt; Vec2</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&mut [f32; 2]>","pg_ecs::prelude::PointF"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5Bf32;+2%5D%3E-for-Vec2\" class=\"impl\"><a href=\"#impl-From%3C%5Bf32;+2%5D%3E-for-Vec2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.array.html\">2</a>]&gt; for Vec2</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(comps: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.array.html\">2</a>]) -&gt; Vec2</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[f32; 2]>","pg_ecs::prelude::PointF"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C(f32,+f32)%3E-for-Vec2\" class=\"impl\"><a href=\"#impl-From%3C(f32,+f32)%3E-for-Vec2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>)&gt; for Vec2</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(comps: (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>)) -&gt; Vec2</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<(f32, f32)>","pg_ecs::prelude::PointF"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVec3%3E-for-Vec2\" class=\"impl\"><a href=\"#impl-From%3CVec3%3E-for-Vec2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;Vec3&gt; for Vec2</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(vec: Vec3) -&gt; Vec2</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Vec3>","pg_ecs::prelude::PointF"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3Cusize%3E-for-Vec2\" class=\"impl\"><a href=\"#impl-Index%3Cusize%3E-for-Vec2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a>&gt; for Vec2</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a></h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a>) -&gt; &amp;&lt;Vec2 as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<usize>","pg_ecs::prelude::PointF"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3Cusize%3E-for-Vec2\" class=\"impl\"><a href=\"#impl-IndexMut%3Cusize%3E-for-Vec2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a>&gt; for Vec2</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a>) -&gt; &amp;mut &lt;Vec2 as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<usize>","pg_ecs::prelude::PointF"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Lerp%3Cf32%3E-for-Vec2\" class=\"impl\"><a href=\"#impl-Lerp%3Cf32%3E-for-Vec2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Lerp&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>&gt; for Vec2</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.lerp\" class=\"method trait-impl\"><a href=\"#method.lerp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lerp</a>(&amp;self, end: Vec2, t: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>) -&gt; Vec2</h4></section></summary><div class=\"docblock\"><p>Linearly interpolate between <code>self</code> and <code>end</code> by <code>t</code> between 0.0 and 1.0.\ni.e. <code>(1.0 - t) * self + (t) * end</code>.</p>\n<p>For interpolating <code>Rotor</code>s with linear interpolation, you almost certainly\nwant to normalize the returned <code>Rotor</code>. For example,</p>\n<div class=\"example-wrap\"><pre class=\"language-rs\"><code>let interpolated_rotor = rotor1.lerp(rotor2, 0.5).normalized();\n</code></pre></div>\n<p>For most cases (especially where performance is the primary concern, like in\nanimation interpolation for games, this ‘normalized lerp’ or ‘nlerp’ is probably\nwhat you want to use. However, there are situations in which you really want\nthe interpolation between two <code>Rotor</code>s to be of constant angular velocity. In this\ncase, check out <code>Slerp</code>.</p>\n</div></details></div></details>","Lerp<f32>","pg_ecs::prelude::PointF"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3Cf32%3E-for-Vec2\" class=\"impl\"><a href=\"#impl-Mul%3Cf32%3E-for-Vec2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>&gt; for Vec2</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = Vec2</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>) -&gt; Vec2</h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<f32>","pg_ecs::prelude::PointF"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul-for-Vec2\" class=\"impl\"><a href=\"#impl-Mul-for-Vec2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a> for Vec2</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = Vec2</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: Vec2) -&gt; Vec2</h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul","pg_ecs::prelude::PointF"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3Cf32%3E-for-Vec2\" class=\"impl\"><a href=\"#impl-MulAssign%3Cf32%3E-for-Vec2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.MulAssign.html\" title=\"trait core::ops::arith::MulAssign\">MulAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>&gt; for Vec2</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign\" class=\"method trait-impl\"><a href=\"#method.mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign<f32>","pg_ecs::prelude::PointF"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign-for-Vec2\" class=\"impl\"><a href=\"#impl-MulAssign-for-Vec2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.MulAssign.html\" title=\"trait core::ops::arith::MulAssign\">MulAssign</a> for Vec2</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign\" class=\"method trait-impl\"><a href=\"#method.mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, rhs: Vec2)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","pg_ecs::prelude::PointF"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Neg-for-Vec2\" class=\"impl\"><a href=\"#impl-Neg-for-Vec2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Neg.html\" title=\"trait core::ops::arith::Neg\">Neg</a> for Vec2</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = Vec2</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg\" class=\"method trait-impl\"><a href=\"#method.neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; Vec2</h4></section></summary><div class='docblock'>Performs the unary <code>-</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details>","Neg","pg_ecs::prelude::PointF"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Vec2\" class=\"impl\"><a href=\"#impl-PartialEq-for-Vec2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for Vec2</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Vec2) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.81.0/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","pg_ecs::prelude::PointF"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Slerp%3Cf32%3E-for-Vec2\" class=\"impl\"><a href=\"#impl-Slerp%3Cf32%3E-for-Vec2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Slerp&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>&gt; for Vec2</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.slerp\" class=\"method trait-impl\"><a href=\"#method.slerp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">slerp</a>(&amp;self, end: Vec2, t: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>) -&gt; Vec2</h4></section></summary><div class=\"docblock\"><p>Spherical-linear interpolation between <code>self</code> and <code>end</code> based on <code>t</code> from 0.0 to 1.0.</p>\n<p><code>self</code> and <code>end</code> should both be normalized or something bad will happen!</p>\n<p>The implementation for SIMD types also requires that the two things being interpolated between\nare not exactly aligned, or else the result is undefined.</p>\n<p>Basically, interpolation that maintains a constant angular velocity\nfrom one orientation on a unit hypersphere to another. This is sorta the “high quality” interpolation\nfor <code>Rotor</code>s, and it can also be used to interpolate other things, one example being interpolation of\n3d normal vectors.</p>\n<p>Note that you should often normalize the result returned by this operation, when working with <code>Rotor</code>s, etc!</p>\n</div></details></div></details>","Slerp<f32>","pg_ecs::prelude::PointF"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub-for-Vec2\" class=\"impl\"><a href=\"#impl-Sub-for-Vec2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a> for Vec2</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = Vec2</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: Vec2) -&gt; Vec2</h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub","pg_ecs::prelude::PointF"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign-for-Vec2\" class=\"impl\"><a href=\"#impl-SubAssign-for-Vec2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.SubAssign.html\" title=\"trait core::ops::arith::SubAssign\">SubAssign</a> for Vec2</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, rhs: Vec2)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","pg_ecs::prelude::PointF"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum-for-Vec2\" class=\"impl\"><a href=\"#impl-Sum-for-Vec2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a> for Vec2</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; Vec2<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = Vec2&gt;,</div></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","pg_ecs::prelude::PointF"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec2\" class=\"impl\"><a href=\"#impl-Vec2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Vec2</h3></section></summary><div class=\"impl-items\"><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">new</a>(x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>) -&gt; Vec2</h4></section><section id=\"method.broadcast\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">broadcast</a>(val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>) -&gt; Vec2</h4></section><section id=\"method.unit_x\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">unit_x</a>() -&gt; Vec2</h4></section><section id=\"method.unit_y\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">unit_y</a>() -&gt; Vec2</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_homogeneous_point\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_homogeneous_point</a>(self) -&gt; Vec3</h4></section></summary><div class=\"docblock\"><p>Create a homogeneous 2d <em>point</em> from this vector interpreted as a point,\nmeaning the homogeneous component will start with a value of 1.0.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_homogeneous_vector\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_homogeneous_vector</a>(self) -&gt; Vec3</h4></section></summary><div class=\"docblock\"><p>Create a homogeneous 2d <em>vector</em> from this vector,\nmeaning the homogeneous component will always have a value of 0.0.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_homogeneous_point\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_homogeneous_point</a>(v: Vec3) -&gt; Vec2</h4></section></summary><div class=\"docblock\"><p>Create a 2d point from a homogeneous 2d <em>point</em>, performing\ndivision by the homogeneous component. This should not be used\nfor homogeneous 2d <em>vectors</em>, which will have 0 as their\nhomogeneous component.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_homogeneous_vector\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_homogeneous_vector</a>(v: Vec3) -&gt; Vec2</h4></section></summary><div class=\"docblock\"><p>Create a 2d vector from homogeneous 2d <em>vector</em>, which simply\ndiscards the homogeneous component.</p>\n</div></details><section id=\"method.dot\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">dot</a>(&amp;self, other: Vec2) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.wedge\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">wedge</a>(&amp;self, other: Vec2) -&gt; Bivec2</h4></section></summary><div class=\"docblock\"><p>The wedge (aka exterior) product of two vectors.</p>\n<p>Note: Sometimes called “cross” product in 2D.\nSuch a product is not well defined in 2 dimensions\nand is really just shorthand notation for a hacky operation that\nextends the vectors into 3 dimensions, takes the cross product,\nthen returns only the resulting Z component as a pseudoscalar value.\nThis value is will have the same value as\nthe resulting bivector of the wedge product in 2d (a 2d\nbivector is also a kind of pseudoscalar value), so you may use\nthis product to calculate the same value.</p>\n<p>This operation results in a bivector, which represents\nthe plane parallel to the two vectors, and which has a\n‘oriented area’ equal to the parallelogram created by extending\nthe two vectors, oriented such that the positive direction is the\none which would move <code>self</code> closer to <code>other</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.geom\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">geom</a>(&amp;self, other: Vec2) -&gt; Rotor2</h4></section></summary><div class=\"docblock\"><p>The geometric product of this and another vector, which\nis defined as the sum of the dot product and the wedge product.</p>\n<p>This operation results in a ‘rotor’, named as such as it may define\na rotation. The rotor which results from the geometric product\nwill rotate in the plane parallel to the two vectors, by twice the angle between\nthem and in the opposite direction (i.e. it will rotate in the direction that would\nbring <code>other</code> towards <code>self</code>, and rotate in that direction by twice the angle between them).</p>\n</div></details><section id=\"method.rotate_by\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">rotate_by</a>(&amp;mut self, rotor: Rotor2)</h4></section><section id=\"method.rotated_by\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">rotated_by</a>(self, rotor: Rotor2) -&gt; Vec2</h4></section><section id=\"method.reflected\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">reflected</a>(&amp;self, normal: Vec2) -&gt; Vec2</h4></section><section id=\"method.mag_sq\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">mag_sq</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a></h4></section><section id=\"method.mag\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">mag</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a></h4></section><section id=\"method.normalize\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">normalize</a>(&amp;mut self)</h4></section><section id=\"method.normalized\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">normalized</a>(&amp;self) -&gt; Vec2</h4></section><section id=\"method.mul_add\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">mul_add</a>(&amp;self, mul: Vec2, add: Vec2) -&gt; Vec2</h4></section><section id=\"method.abs\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">abs</a>(&amp;self) -&gt; Vec2</h4></section><section id=\"method.clamp\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">clamp</a>(&amp;mut self, min: Vec2, max: Vec2)</h4></section><section id=\"method.clamped\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">clamped</a>(self, min: Vec2, max: Vec2) -&gt; Vec2</h4></section><section id=\"method.map\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">map</a>&lt;F&gt;(&amp;self, f: F) -&gt; Vec2<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>,</div></h4></section><section id=\"method.apply\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">apply</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>,</div></h4></section><section id=\"method.max_by_component\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">max_by_component</a>(self, other: Vec2) -&gt; Vec2</h4></section><section id=\"method.min_by_component\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">min_by_component</a>(self, other: Vec2) -&gt; Vec2</h4></section><section id=\"method.component_max\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">component_max</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a></h4></section><section id=\"method.component_min\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">component_min</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a></h4></section><section id=\"method.zero\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">zero</a>() -&gt; Vec2</h4></section><section id=\"method.one\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">one</a>() -&gt; Vec2</h4></section><section id=\"method.xyz\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">xyz</a>(&amp;self) -&gt; Vec3</h4></section><section id=\"method.xyzw\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">xyzw</a>(&amp;self) -&gt; Vec4</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.layout\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">layout</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/alloc/layout/struct.Layout.html\" title=\"struct core::alloc::layout::Layout\">Layout</a></h4></section></summary><div class=\"docblock\"><p>Get the <a href=\"https://doc.rust-lang.org/1.81.0/core/alloc/layout/struct.Layout.html\" title=\"struct core::alloc::layout::Layout\"><code>core::alloc::Layout</code></a> of <code>Self</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_array\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_array</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.array.html\">2</a>]</h4></section></summary><div class=\"docblock\"><p>Interpret <code>self</code> as a statically-sized array of its base numeric type</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_array\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_mut_array</a>(&amp;mut self) -&gt; &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.array.html\">2</a>]</h4></section></summary><div class=\"docblock\"><p>Interpret <code>self</code> as a statically-sized array of its base numeric type</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>]</h4></section></summary><div class=\"docblock\"><p>Interpret <code>self</code> as a slice of its base numeric type</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>]</h4></section></summary><div class=\"docblock\"><p>Interpret <code>self</code> as a slice of its base numeric type</p>\n</div></details><section id=\"method.as_byte_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_byte_slice</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section><section id=\"method.as_mut_byte_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_mut_byte_slice</a>(&amp;mut self) -&gt; &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut [u8]\">ⓘ</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a></h4></section></summary><div class=\"docblock\"><p>Returns a constant unsafe pointer to the underlying data in the underlying type.\nThis function is safe because all types here are repr(C) and can be represented\nas their underlying type.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>It is up to the caller to correctly use this pointer and its bounds.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_ptr\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_mut_ptr</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable unsafe pointer to the underlying data in the underlying type.\nThis function is safe because all types here are repr(C) and can be represented\nas their underlying type.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>It is up to the caller to correctly use this pointer and its bounds.</p>\n</div></details></div></details>",0,"pg_ecs::prelude::PointF"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec2\" class=\"impl\"><a href=\"#impl-Vec2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Vec2</h3></section></summary><div class=\"impl-items\"><section id=\"method.refract\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">refract</a>(&amp;mut self, normal: Vec2, eta: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>)</h4></section><section id=\"method.refracted\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">refracted</a>(&amp;self, normal: Vec2, eta: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>) -&gt; Vec2</h4></section></div></details>",0,"pg_ecs::prelude::PointF"],["<section id=\"impl-Copy-for-Vec2\" class=\"impl\"><a href=\"#impl-Copy-for-Vec2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for Vec2</h3></section>","Copy","pg_ecs::prelude::PointF"],["<section id=\"impl-StructuralPartialEq-for-Vec2\" class=\"impl\"><a href=\"#impl-StructuralPartialEq-for-Vec2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for Vec2</h3></section>","StructuralPartialEq","pg_ecs::prelude::PointF"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()